To start tracking an existing project-- like this practice project-- cd into the project's dir and type
$ git init
Git will make a .git subdirectory for tracking purposes.

To start version-controlling existing files from the project -- like this very file-- , do an initial commit
$git add GitPracticeProject.txt // add this file to tracking
$git add License
$git commit -m 'initial project version' // commit

To get an existing project from a server, use 
$git clone <URL>
This command creates a directory, and initializes a .git subdirectory, and pulls down all of the data from that repository -- that is all version of all files from the history of that project. Alternatively,
$git clone <URL> <target dir>
pulls down all of the info into a custom dir. If your URL is of the form git:// or user@server:path/to/repo.git, than your command will use the SSH transfer protocol.

A file can be in one of three states, as tracked by Git: unmodified, modified, or staged. A file can also be untracked if it is a new file that has not yet been stage. To obtain the status of files, type
$git status

To get the options for a git command use
$git help <command>

If you don't want to track certain types of files, like .o files, you can type
$cat .gitignore // makes an "ignore" file
$*.[o] // .o files
$*~    // temporary files

To see unstaged changes, use
$git diff

To skip the "add" step and go straight to commit, use
$git commit -a -m
but note that this only stages and commits tracked files. Any new, untracked files are not acted upon.

To make a branch off of the previous commit, use 
$git branch <branch name>
$git checkout <branch name>  // to be “cd’d” into that branch

To list available branches, use
$git branch

To merge a branch into your current active branch (the one you’re currently checked into), use
$git merge <branch> // i.e. you want to merge <branch> into the active branch

It seems that you must commit your desired changes before checking in/out between branches. It is also useful to close the file before checking in/out between branches, b/c if the file is left open, the differences are carried into the destination branch. 

There is a nice git GUI called gitk. gitk is supposedly built in, but it does not seem to be built in with my version: git version 2.5.4 (Apple Git-61)).

————————————————————————————————

To create a repo on GitHub, one can use the “+” button on github.com, or the command line can be used. To create a remote repo on GitHub, use
$git remote add origin https://github.com/gilliss/ExampleRepo.git

“As you probably know, git is a distributed version control system. Most operations are done locally. To communicate with the outside world, git uses what are called remotes. These are repositories other than the one on your local disk which you can push your changes into (so that other people can see them) or pull from (so that you can get others changes). The command git remote add origin https://github.com/gilliss/ExampleRepo.git a new remote called origin located at https://github.com/gilliss/ExampleRepo.git. Once you do this, in your push commands, you can push to origin instead of typing out the whole URL.”

To fill the remote repo with the work in your local repo, use
$git push -u origin master

“This is a command that says ‘push the commits in the local branch named master to the remote named origin’. Once this is executed, all the stuff that you last synchronised with origin will be sent to the remote repository and other people will be able to see them there.”

Ref: http://stackoverflow.com/questions/5617211/what-is-git-remote-add-and-git-push-origin-master

————————————————————————————————

See this tutorial for notes: http://pcottle.github.io/learnGitBranching/
See also this list of good resources: https://help.github.com/articles/good-resources-for-learning-git-and-github/
 


