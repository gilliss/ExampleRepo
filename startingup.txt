To start tracking an existing project-- like this practice project-- cd into the project's dir and type
$ git init
Git will make a .git subdirectory for tracking purposes.

To start version-controlling existing files from the project -- like this very file-- , do an initial commit
$git add GitPracticeProject.txt // add this file to tracking
$git add License
$git commit -m 'initial project version' // commit

To get an existing project from a server, use 
$git clone <URL>
This command creates a directory, and initializes a .git subdirectory, and pulls down all of the data from that repository -- that is all version of all files from the history of that project. Alternatively,
$git clone <URL> <target dir>
pulls down all of the info into a custom dir. If your URL is of the form git:// or user@server:path/to/repo.git, than your command will use the SSH transfer protocol.

A file can be in one of three states, as tracked by Git: unmodified, modified, or staged. A file can also be untracked if it is a new file that has not yet been stage. To obtain the status of files, type
$git status

To get the options for a git command use
$git help <command>

If you don't want to track certain types of files, like .o files, you can type
$cat .gitignore // makes an "ignore" file
$*.[o] // .o files
$*~    // temporary files

To see unstaged changes, use
$git diff

To skip the "add" step and go straight to commit, use
$git commit -a -m
but note that this only stages and commits tracked files. Any new, untracked files are not acted upon.

To make a branch off of the previous commit, use 
$git branch <branch name>
$git checkout <branch name>  // to be “cd’d” into that branch

To list available branches, use
$git branch

To merge a branch into your current active branch (the one you’re currently checked into), use
$git merge <branch> // i.e. you want to merge <branch> into the active branch

… —

See this tutorial for notes: http://pcottle.github.io/learnGitBranching/

See also this list of good resources: https://help.github.com/articles/good-resources-for-learning-git-and-github/
 


